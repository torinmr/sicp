(load "huffman")
(load "67")

(define (encode message tree)
  (if (null? message)
      '()
      (append (encode-symbol (car message) tree)
              (encode (cdr message) tree))))

(define (in-list? elem l)
  (cond ((null? l) false)
        ((equal? (car l) elem) true)
        (else (in-list? elem (cdr l)))))

(define (encode-symbol symbol tree)
  (cond ((leaf? tree) '())
        ((in-list? symbol (symbols (left-branch tree)))
         (cons 0 (encode-symbol symbol (left-branch tree))))
        ((in-list? symbol (symbols (right-branch tree)))
         (cons 1 (encode-symbol symbol (right-branch tree))))
        (else (error "Symbol -- not in tree" symbol))))

(assert (equal? '(0) (encode-symbol 'A sample-tree)))
(assert (equal? '(1 0) (encode-symbol 'B sample-tree)))
(assert (equal? '(1 1 1) (encode-symbol 'C sample-tree)))
(assert (equal? '(1 1 0) (encode-symbol 'D sample-tree)))

(assert (equal? sample-message (encode '(a d a b b c a) sample-tree)))
