(load "tree-set")

(define (list->tree elements)
  (car (partial-tree elements (length elements))))

(define (partial-tree elts n)
  (if (= n 0)
      (cons '() elts)
      (let ((left-size (quotient (- n 1) 2)))
        (let ((left-result (partial-tree elts left-size)))
          (let ((left-tree (car left-result))
                (non-left-elts (cdr left-result))
                (right-size (- n (+ left-size 1))))
            (let ((this-entry (car non-left-elts))
                  (right-result (partial-tree (cdr non-left-elts)
                                              right-size)))
              (let ((right-tree (car right-result))
                    (remaining-elts (cdr right-result)))
                (cons (make-tree this-entry left-tree right-tree)
                      remaining-elts))))))))

(assert (equal? (list->tree '()) '()))
(assert (equal? (list->tree '(1)) '(1 () ())))
(assert (equal? (list->tree '(1 2)) '(1
                                      ()
                                      (2 () ()))))
(assert (equal? (list->tree '(1 2 3)) '(2
                                        (1 () ())
                                        (3 () ()))))
(assert (equal? (list->tree '(1 2 3 4)) '(2
                                          (1 () ())
                                          (3
                                           ()
                                           (4 () ())))))
(assert (equal? (list->tree '(1 2 3 4 5)) '(3
                                            (1
                                             ()
                                             (2 () ()))
                                            (4
                                             ()
                                             (5 () ())))))
(assert (equal? (list->tree '(1 2 3 4 5 6)) '(3
                                              (1
                                               ()
                                               (2 () ()))
                                              (5
                                               (4 () ())
                                               (6 () ())))))
(assert (equal? (list->tree '(1 2 3 4 5 6 7)) '(4
                                                (2
                                                 (1 () ())
                                                 (3 () ()))
                                                (6
                                                 (5 () ())
                                                 (7 () ())))))

;; a) The partial-tree function divides the list in half. The first half of the
;; elements are passed to a recursive call to partial-tree to be made into their
;; own tree, the first element of the second half is reserved, and the rest of
;; the elements are passed to a second recursive call to partial-tree. Then, the
;; retained middle element is used as the root of the tree, with the subtrees
;; computed by partial-tree used as the left and right subtrees. If the input
;; list is ordered, this will guarantee that the resulting tree is valid and
;; balanced.
;;
;;       5
;;    /     \
;;   1      9
;;    \    / \
;;     3  7  11

;; b) Every call to partial-tree results in either an empty node '() or a tree
;; node containing an element from the original list. Since the final tree will
;; contain exactly one node for each element from the list, plus at most two
;; empty nodes per regular node, the total number of calls to partial-tree is
;; bound by 3n for an input list with n elements. Thus, the order of growth is
;; O(n)
