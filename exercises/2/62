(load "ordered-list-set")
(load "61")

(define (union-set set1 set2)
  (cond ((null? set1) set2)
        ((null? set2) set1)
        (else
         (let ((x1 (car set1)) (x2 (car set2)))
           (cond ((= x1 x2)
                  (cons x1
                        (union-set (cdr set1)
                                   (cdr set2))))
                 ((< x1 x2)
                  (cons x1
                        (union-set (cdr set1)
                                   set2)))
                 ((< x2 x1)
                  (cons x2
                        (union-set set1
                                   (cdr set2)))))))))

(assert (equal? '() (union-set '() '())))
(assert (equal? '(1) (union-set '(1) '())))
(assert (equal? '(1 2) (union-set '() '(1 2))))
(assert (equal? '(1 2) (union-set '(1) '(2))))
(assert (equal? '(1 2) (union-set '(2) '(1))))
(assert (equal? '(1 2 3 4 5) (union-set '(1 2 5) '(3 4))))
(assert (equal? '(1 2 3 4 5) (union-set '(3 4) '(1 2 5))))

(define (enumerate n)
  (define (iter i)
    (cond ((> i n) '())
          (else (cons i (iter (+ 1 i))))))
  (iter 1))

;; This takes forever to run with the unordered list implementation.
(assert (equal? (enumerate 10000)
                (union-set (enumerate 10000) (enumerate 10000))))
