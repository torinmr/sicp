(load "tree-set")

(define (tree->list-1 tree)
  (if (null? tree)
      '()
      (append (tree->list-1 (left-branch tree))
              (cons (entry tree)
                    (tree->list-1 (right-branch tree))))))

(assert (equal? (tree->list-1 '(7
                                (3
                                 (1 () ())
                                 (5 () ()))
                                (9
                                 ()
                                 (11 () ()))))
                '(1 3 5 7 9 11)))

(assert (equal? (tree->list-1 '(3
                                (1 () ())
                                (7
                                 (5 () ())
                                 (9
                                  ()
                                  (11 () ())))))
                '(1 3 5 7 9 11)))

(assert (equal? (tree->list-1 '(5
                                (3
                                 (1 () ())
                                 ())
                                (9
                                 (7 () ())
                                 (11 () ()))))
                '(1 3 5 7 9 11)))


(define (tree->list-2 tree)
  (define (copy-to-list tree result-list)
    (if (null? tree)
        result-list
        (copy-to-list (left-branch tree)
                      (cons (entry tree)
                            (copy-to-list (right-branch tree)
                                          result-list)))))
  (copy-to-list tree '()))

(assert (equal? (tree->list-2 '(7
                                (3
                                 (1 () ())
                                 (5 () ()))
                                (9
                                 ()
                                 (11 () ()))))
                '(1 3 5 7 9 11)))

(assert (equal? (tree->list-2 '(3
                                (1 () ())
                                (7
                                 (5 () ())
                                 (9
                                  ()
                                  (11 () ())))))
                '(1 3 5 7 9 11)))

(assert (equal? (tree->list-2 '(5
                                (3
                                 (1 () ())
                                 ())
                                (9
                                 (7 () ())
                                 (11 () ()))))
                '(1 3 5 7 9 11)))

;; a) These functions both produce a list with the elements of the tree in
;; order. Thus, they both produce the result (1 3 5 7 9 11) for all the trees in
;; figure 2.17.

;; b) They both require the same number of iterations (i.e. calls to
;; copy-to-list or tree->list-1) to process a tree, since in both cases each
;; iteration adds one element to the result list.
;;
;; There are two significant differences. First, the second procedure is tail
;; recursive, while the first is not. Second, the first procedure calls append
;; on each iteration, which itself is a procedure which takes linear time in the
;; size of its first argument. (Specifically, it requires a number of cons
;; operations equal to the number of elements in the first list passed in.) To
;; analyze the effect of this on the running time, let's use the following
;; argument:
;;
;; Consider a balanced binary tree with n levels, and 2^n - 1 elements. There is
;; one call to append at the top level, which takes 2^(n-1) - 1 cons operations
;; to complete (the size of the left subtree). There are two calls to append at
;; the second level, which each take 2^(n-2) - 1 cons operations to complete,
;; for a total of 2^(n-1) - 2 cons operations. So, the ith level takes 2^(n-1) -
;; 2^(i-1) operations to complete. Summing from 1 to n, there are a total of
;; n*2^(n-1) - (2^n - 1) = (n-2)*2^(n-1) + 1 cons operations happening inside of
;; calls to append. Thus, running time in the height of the tree is O(n*2^n),
;; and therefore running time in terms of the number of elements is O(n*log(n)).
