;; Representation 1: (cons (bottom-left point) (top-right point))
(define (make-rect p1 p2)
  (let ((x1 (x-point p1))
        (x2 (x-point p2))
        (y1 (y-point p1))
        (y2 (y-point p2)))
    (cond ((and (< x1 x2) (< y1 y2)) (cons p1 p2))
          ((and (> x1 x2) (> y1 y2)) (cons p2 p1))
          ((and (< x1 x2) (> y1 y2)) (cons (make-point x1 y2) (make-point x2 y1)))
          (else (cons (make-point x2 y1) (make-point x1 y2))))))

(define (bottom-left r)
  (car r))

(define (top-right r)
  (cdr r))

;; Representation 2: (cons (bottom-left point) (cons width height))
(define (make-rect p1 p2)
  (let ((x1 (x-point p1))
        (x2 (x-point p2))
        (y1 (y-point p1))
        (y2 (y-point p2)))
    (let ((width (abs (- x1 x2)))
          (height (abs (- y1 y2))))
      (cond ((and (< x1 x2) (< y1 y2)) (cons p1 (cons width height)))
            ((and (> x1 x2) (> y1 y2)) (cons p2 (cons width height)))
            ((and (< x1 x2) (> y1 y2)) (cons (make-point x1 y2) (cons width height)))
            (else (cons (make-point x2 y1) (cons width height)))))))

(define (bottom-left r)
  (car r))

(define (top-right r)
  (let ((x (x-point (car r)))
        (y (y-point (car r)))
        (w (car (cdr r)))
        (h (cdr (cdr r))))
    (make-point (+ x w) (+ y h))))

;; Representation independent procedures

(define (print-rect r)
  (print-point (bottom-left r))
  (print-point (top-right r)))

(define (perimeter r)
  (let ((p1 (bottom-left r))
        (p2 (top-right r)))
    (let ((x1 (x-point p1))
          (x2 (x-point p2))
          (y1 (y-point p1))
          (y2 (y-point p2)))
      (* 2 (+ (- x2 x1) (- y2 y1))))))

(define (area r)
  (let ((p1 (bottom-left r))
        (p2 (top-right r)))
    (let ((x1 (x-point p1))
          (x2 (x-point p2))
          (y1 (y-point p1))
          (y2 (y-point p2)))
      (* (- x2 x1) (- y2 y1)))))
