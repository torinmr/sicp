;; Also throws error when denominator is zero, and normalizes representation of
;; zero to (0 1).

(define (make-rat n d)
  (let ((n-pos (abs n))
        (d-pos (abs d)))
    (let ((g (gcd n-pos d-pos)))
      (let ((n-low (/ n-pos g))
            (d-low (/ d-pos g)))
        (cond ((= d 0) (error "Denominator is zero"))
              ((= n 0) (cons 0 1))
              ((and (> n 0) (> d 0)) (cons n-low d-low))
              ((and (< n 0) (< d 0)) (cons n-low d-low))
              (else (cons (- n-low) d-low)))))))
