(load "deriv.scm")

(define (make-exponentiation b e)
  (cond ((=number? e 0) 1)
        ((=number? e 1) b)
        ((=number? b 0) 0)
        ((=number? b 1) 1)
        ((and (number? b) (number? e)) (expt b e))
        (else (list '** b e))))

(define (exponentiation? x)
  (and (pair? x) (eq? (car x) '**)))

(define (base e) (cadr e))

(define (exponent e) (caddr e))

(define (deriv-exp b e var)
  (cond ((=number? (deriv e var) 0)
         (make-product
          (make-product e
                        (make-exponentiation b
                                             (make-sum e -1)))
          (deriv b var)))
        (else
         (error "variable exponents not yet supported"))))

(define (deriv exp var)
  (cond ((number? exp) 0)
        ((variable? exp)
         (if (same-variable? exp var) 1 0))
        ((sum? exp)
         (make-sum (deriv (addend exp) var)
                   (deriv (augend exp) var)))
        ((product? exp)
         (make-sum
          (make-product (multiplier exp)
                        (deriv (multiplicand exp) var))
          (make-product (deriv (multiplier exp) var)
                        (multiplicand exp))))
        ((exponentiation? exp)
         (deriv-exp (base exp) (exponent exp) var))
        (else
         (error "unknown expression type -- DERIV" exp))))

;; (deriv '(** x 2) 'x)
;; (deriv '(** x (* 2 (+ y 1))) 'x)
;; (deriv '(** (+ (* 3 x) -7) (+ 2 7)) 'x)
