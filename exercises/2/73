(load "deriv.scm")
(load "56")

(define (deriv exp var)
  (cond ((number? exp) 0)
        ((variable? exp) (if (same-variable? exp var) 1 0))
        (else ((get 'deriv (operator exp)) (operands exp)
               var))))

(define (operator exp) (car exp))

(define (operands exp) (cdr exp))

;; a) If the expression is a number of variable, the code functions just as the
;; original deriv procedure. (These must be handled separately, since they do
;; not contain an operator "tag.") Otherwise, the "deriv" procedure of the type
;; corresponding to the type of the arithmetic expression is retrieved and
;; applied.

;; b)

(define (install-deriv-base-rules)

  (define (make-sum a1 a2)
    (cond ((=number? a1 0) a2)
          ((=number? a2 0) a1)
          ((and (number? a1) (number? a2))
           (+ a1 a2))
          (else (list '+ a1 a2))))

  (define (addend s) (cadr s))

  (define (augend s) (caddr s))

  (define (sum operands var)
    (make-sum (deriv (addend operands) var)
              (deriv (augend operands) var)))

  (define (make-product m1 m2)
    (cond ((=number? m1 0) 0)
          ((=number? m2 0) 0)
          ((=number? m1 1) m2)
          ((=number? m2 1) m1)
          ((and (number? m1) (number? m2))
           (* m1 m2))
          (else (list '* m1 m2))))

  (define (multiplier p) (cadr p))

  (define (multiplicand p) (caddr p))

  (define (product operands var)
    (make-sum
     (make-product (multiplier exp)
                   (deriv (multiplicand exp) var))
     (make-product (deriv (multiplier exp) var)
                   (multiplicand exp))))

  (put 'deriv '+ sum)
  (put 'deriv '* product)
  'done)

;; c)

(define (install-deriv-exponent-rules)

  (define (make-exponentiation b e)
    (cond ((=number? e 0) 1)
          ((=number? e 1) b)
          ((=number? b 0) 0)
          ((=number? b 1) 1)
          ((and (number? b) (number? e)) (expt b e))
          (else (list '** b e))))

  (define (base e) (cadr e))

  (define (exponent e) (caddr e))

  (define (exponent operands var)
    (deriv-exp (car operands) (cadr operands) var))

  (put 'deriv '** exponent)
  'done)

;; d)

;; In the installation function, the put lines become:
;; (put '+ 'deriv sum)
;; (put '* 'deriv product)
;;
;; Is this a trick question?
