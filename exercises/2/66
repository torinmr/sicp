(define (entry x) (car x))
(define (left-branch x) (cadr x))
(define (right-branch x) (caddr x))

;; Returns a record with the given key, or false if none exists.
(define (lookup given-key set-of-records)
  (if (null? set-of-records)
      false
      (let ((entry-key (key (entry set-of-records))))
        (cond ((= given-key entry-key)
               (entry set-of-records))
              ((< given-key entry-key)
               (lookup given-key (left-branch set-of-records)))
              ((> given-key entry-key)
               (lookup given-key (right-branch set-of-records)))))))

;; Test one implementation: Record is just a key.
(define (key record) record)

(let ((test-set '(3 (1 ()
                      (2 () ()))
                    (5 (4 () ())
                       (6 () ())))))
  (begin (assert (eq? (lookup 1 test-set) 1))
         (assert (eq? (lookup 2 test-set) 2))
         (assert (eq? (lookup 5 test-set) 5))
         (assert (eq? (lookup 7 test-set) false))))

;; Test another implementation: Record is a list, first element is the key.
(define (key record) (car record))

(let ((test-set '((3 a b) ((1 c d) ()
                      ((2 e) () ()))
                    ((5 f g) ((4 foo bar) () ())
                       ((6 e z) () ())))))
  (begin (assert (equal? (lookup 1 test-set) '(1 c d)))
         (assert (equal? (lookup 2 test-set) '(2 e)))
         (assert (equal? (lookup 4 test-set) '(4 foo bar)))
         (assert (equal? (lookup 7 test-set) false))))
