(define (filtered-accumulate combiner filter null-value term a next b)
  (define (iter a result)
    (cond ((> a b) result)
          ((filter a) (iter (next a) (combiner result (term a))))
          (else (iter (next a) result))))
  (iter a null-value))

(define (sum-of-prime-squares a b)
  (filtered-accumulate + prime? 0 square a inc b))

(define (product-of-relative-primes n)
  (define (relative-prime? a)
    (= (gcd a n) 1))
  (filtered-accumulate * relative-prime? 1 identity 1 inc (- n 1)))