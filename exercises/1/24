(define (expmod base exp m)
  (cond ((= exp 0) 1)
        ((even? exp)
         (remainder (square (expmod base (/ exp 2) m))
                    m))
        (else
         (remainder (* base (expmod base (- exp 1) m))
                    m))))

(define (fermat-test n)
  (define (try-it a)
    (= (expmod a n n) a))
  (try-it (+ 1 (random (- n 1)))))

(define (fast-prime? n times)
  (cond ((= times 0) true)
  ((fermat-test n) (fast-prime? n (- times 1)))
  (else false)))

(define (prime? n)
  (fast-prime? n 100))

(search-for-primes 100000000000000 3) => 0 seconds

X zeroes:
(search-for-primes 1000000000000000000000000000000000000000000000 3) => .04 seconds
2X zeroes:
(search-for-primes 1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 3) => 0.1 seconds
3X zeroes:
(search-for-primes 1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 3) => .18 seconds
4X zeroes: (search-for-primes 1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 3) => .27 seconds

If running time were order log(n), we would expect the time to be proportional
to the number of zeroes. Instead, it increases faster than that. I would expect
this is because the time to complete each multiplication or division in expmod
is not constant, but grows with the size of the numbers being computed.
