(define (cube x)
  (* x x x))

(define (sum term a next b)
  (if (> a b)
      0
      (+ (term a)
         (sum term (next a) next b))))

(define (inc x)
  (+ 1 x))

(define (simpson f a b n)
  (let ((h (/ (- b a) n)))
    (define (simpson-term k)
      (let ((y (+ a (* k h))))
        (cond ((or (= k 0) (= k n)) (f y))
              ((even? k) (* 2 (f y)))
              (else (* 4 (f y))))))
    (* (sum simpson-term 0 inc n)
       (/ h 3))))

(simpson cube 0.0 1.0 100) => .24999999999999992

(simpson cube 0.0 1.0 1000) => .2500000000000003

These are much more accurate.